node {
    def app
    def dep

    stage('Clone repository') {
        checkout scm CI

        sh 'docker volume create vol-in'
        sh 'docker volume create vol-out'
        sh 'docker volume ls'

        sh 'docker run -d --rm --name dummy -v vol-in:/vi alpine tail -f /dev/null'
        sh 'docker cp . dummy:/vi'
        sh 'docker stop dummy'
    }

    stage('Dependencies') {
        checkout scm CI

    dep = docker.build("dependency-image", "./CI/dependency -v vol-in:/vi -v vol-out:/vo")
    }

    stage('Build image') {
        /* This builds the actual image; synonymous to
         * docker build on the command line */
        sh 'ls -al CI'
        //def dockerfile = 'build.dockerfile'
        app = docker.build("build-image", "./CI/build")
    }

    stage('Test image') {
        /* Ideally, we would run a test framework against our image.
         * For this example, we're using a Volkswagen-type approach */

        docker.build("test-image", "./CI/test")
        // app.inside {
        //     sh 'echo "Tests passed"'
        // }
    }

    stage('Push image') {
        /* Finally, we'll push the image with two tags:
         * First, the incremental build number from Jenkins
         * Second, the 'latest' tag.
         * Pushing multiple tags is cheap, as all the layers are reused. */
        // docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
        //     app.push("${env.BUILD_NUMBER}")
        //     app.push("latest")
        // }
    }
}