pipeline {
    agent none

    stages {
        stage('Checkout on volumine') {
            agent any //if fail stop dummy
            steps {
                                sh 'docker stop dummy'
                sh 'docker volume create vol-in'
                sh 'docker volume create vol-out'
                sh 'rm * -r'
                sh 'docker volume ls'

                sh 'docker run -d --rm --name dummy -v vol-in:/vi alpine tail -f /dev/null'
                dir('scm_cp') {
                    checkout scm
                    sh 'ls -al'
                    sh 'rm .git .github -r'
                    sh 'cat package.json'
                    sh 'docker cp . dummy:/vi/$BUILD_NUMBER'
                }
            }

        }

        stage('Build') {
            agent {
                docker {
                    image 'node'
                    args '-v vol-in:/vi -v vol-out:/vo -v $WORKSPACE:/output'

                }
            }
            steps {
                sh 'ls /vi/$BUILD_NUMBER -al'
                dir('BLD') {
                    sh 'cp /vi/$BUILD_NUMBER/ . -r'
                    sh 'npm install --save --legacy-peer-deps'
                    sh 'npm run build'
                    sh 'ls -al'
                    sh 'cp . /output/pckg -r'
                }
            }
        }

        stage('Test') {
            agent {
                docker {
                    image 'node'
                    args '-v vol-in:/vi -v vol-out:/vo'

                }
            }
            steps {

                dir('BLD') {
                    //sh 'npm run test:lint:md'
                    //sh 'npm run test:lint:stylelint'
                    //sh 'npm run test:lint:lockfile'
                    //sh 'npm run test:html'
                    //sh 'npm run test:unit'
                }

            }
        }

        stage('Deploy') {
            agent {
                docker {
                    image 'node'
                    args '-v vol-in:/vi -v vol-out:/vo'

                }
            }
            steps {

                dir('BLD') {

                    script {
                        env.PROCEED_TO_DEPLOY = 1
                        try {
                            timeout(time: 1, unit: 'MINUTES') {
                                sh 'npm start'
                            }
                        } catch (Exception e) {
                            echo e.toString()
                            if(e.toString()=="org.jenkinsci.plugins.workflow.steps.FlowInterruptedException")
                            {
                                env.PROCEED_TO_DEPLOY = 1
                                echo 'aaaaa'
                            }else{
                                env.PROCEED_TO_DEPLOY = 0
                                throw new Exception(e.toString())
                            }
                        }
                    }

                }

            }
        }

        stage('Publish') {
            agent {
                docker {
                    image 'node'
                    args '-v vol-in:/vi -v vol-out:/vo'

                }
            }
            steps {
                dir('pckg/$BUILD_NUMBER') {
                        sh 'ls . -al'                    
                        withEnv(["TOKEN=${NPMJS_TOKEN}"]) {
                            sh 'echo "//registry.npmjs.org/:_authToken=${TOKEN}" >> ~/.npmrc'
                        }
                        sh 'git config --global user.email "pwilkosz99@gmail.com"'
                        sh 'git config --global user.name "PWilkosz"'
                        withEnv(["TOKEN=${GH_TOKEN}"]) {
                            sh 'git config remote.origin.url "https://${TOKEN}@github.com/PWilkosz99/nodejs.org.git"'
                        }
                        sh 'npm pack'
                        sh 'npm publish nodejs.org-pwilkosz-0.0.9.tgz'
                        sh 'git tag -a "0.0.1-build$BUILD_NUMBER" -m "0.0.1-build$BUILD_NUMBER"'
                        sh 'git push --tags'
                }
            }
        }

    }
}